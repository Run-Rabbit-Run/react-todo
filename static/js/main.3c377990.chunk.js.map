{"version":3,"sources":["components/tasks-list/tasks-list.component.jsx","components/create-task/create-task.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["TasksList","tasks","handleRemoveTask","handleChangeTaskState","className","allIds","map","id","byId","state","onClick","cn","finished","text","CreateTask","placeholder","taskValue","handleChange","handleAddTask","onSubmit","type","value","onChange","disabled","App","event","setState","newTaskValue","target","preventDefault","task","_","uniqueId","newTasks","omit","filter","item","console","log","newState","newById","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c377990.chunk.js","sourcesContent":["import { FaRegTrashAlt } from \"react-icons/fa\";\r\nimport { MdCheckBoxOutlineBlank } from \"react-icons/md\";\r\nimport { MdCheckBox } from \"react-icons/md\";\r\nimport cn from 'classnames';\r\nimport './task-list.styles.scss'\r\n\r\nexport const TasksList = ({ tasks, handleRemoveTask, handleChangeTaskState }) => {\r\n  return (\r\n    <ul className='tasks-list'>\r\n      {\r\n        tasks.allIds.map((id) => {\r\n          return (\r\n            <li\r\n              className='task-item'\r\n              key={tasks.byId[id].id}\r\n            >\r\n              <div className='check-box'>\r\n                {\r\n                  tasks.byId[id].state === 'active' ? <MdCheckBoxOutlineBlank\r\n                    onClick={handleChangeTaskState(id)}\r\n                  /> : <MdCheckBox\r\n                    onClick={handleChangeTaskState(id)}\r\n                  />\r\n                }\r\n              </div>\r\n              <p\r\n                className={cn({\r\n                  'task-text': true,\r\n                  finished: tasks.byId[id].state === 'finished',\r\n                })}\r\n                onClick={handleChangeTaskState(id)}\r\n              >\r\n                {tasks.byId[id].text}\r\n              </p>\r\n              <button\r\n                className='button delete-button'\r\n                onClick={handleRemoveTask(id)}\r\n              >\r\n                <FaRegTrashAlt />\r\n              </button>\r\n            </li>\r\n          );\r\n        })\r\n      }\r\n    </ul>\r\n  );\r\n}","import './create-task.styles.scss'\r\n\r\nexport const CreateTask = ({ placeholder, taskValue, handleChange, handleAddTask }) => {\r\n  return (\r\n    <form\r\n      className='task-form'\r\n      onSubmit={handleAddTask}\r\n    >\r\n      <input\r\n        className='input'\r\n        type='text'\r\n        placeholder={placeholder}\r\n        value={taskValue}\r\n        onChange={handleChange}\r\n      />\r\n      <button\r\n        className='button submit-button'\r\n        type='submit'\r\n        disabled={taskValue === ''}\r\n      >Add</button>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { TasksList } from \"./components/tasks-list/tasks-list.component\";\nimport { CreateTask } from \"./components/create-task/create-task.component\";\nimport _ from \"lodash\";\nimport \"./App.scss\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: {\n        byId: {\n          'uniqueId': {\n            id: 'uniqueId',\n            text: 'Your first Task!',\n            state: 'active',\n          }\n        },\n\n        allIds: ['uniqueId'],\n      },\n      newTaskValue: '',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ newTaskValue: event.target.value });\n  }\n\n  handleAddTask = (event) => {\n    event.preventDefault();\n    const { tasks, newTaskValue } = this.state;\n    const task = {\n      id: _.uniqueId(),\n      text: newTaskValue,\n      state: 'active',\n    }\n    const byId = { ...tasks.byId, [task.id]: task };\n    const allIds = [ ...tasks.allIds, task.id ];\n    const newTasks = { byId: byId, allIds: allIds };\n    this.setState({ tasks: newTasks, newTaskValue: '' });\n  }\n\n  handleRemoveTask = (id) => () => {\n    const { byId, allIds } = this.state.tasks;\n    const newById = _.omit(byId, id);\n    const newAllIds = allIds.filter((item) => item !== id);\n    const newTasks = { byId: newById, allIds: newAllIds };\n    this.setState({ tasks: newTasks });\n  }\n\n  handleChangeTaskState = (id) => () => {\n    console.log('hey')\n    const { byId } = this.state.tasks;\n    const currentState = byId[id].state;\n    const newState = currentState === 'active' ? 'finished' : 'active';\n    const newById = { ...byId };\n    newById[id].state = newState;\n    this.setState({ byId: newById });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='app-container'>\n          <h1 className='app-title'>Todo App</h1>\n          <CreateTask\n            placeholder='Новая задача'\n            taskValue={this.state.newTaskValue}\n            handleChange={this.handleChange}\n            handleAddTask={this.handleAddTask}\n          />\n          <TasksList\n            tasks={this.state.tasks}\n            handleRemoveTask={this.handleRemoveTask}\n            handleChangeTaskState={this.handleChangeTaskState}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}